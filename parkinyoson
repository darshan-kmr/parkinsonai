First
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import pickle

pd.set_option('display.max_rows',None)
pd.set_option('display.max_columns',None)

import warnings
warnings.filterwarnings('ignore')

SECOND
df = pd.read_csv('/kaggle/input/parkinsons-disease-data-set/parkinsons.data')

THIRD
df.head()

FOURTH
print(df.shape)
print(f'Total number of rows: {df.shape[0]} and columns: {df.shape[1]}')

FIFTH
df.info()

SIXTH
df.describe()

 SEVENTH
df.describe(include='all')

8TH
df.isnull().sum().sort_values(ascending=False) * 100 / len(df)

9TH
plt.figure(figsize=(10,6))
sns.heatmap(df.isnull(),cbar=True,cmap='coolwarm')
plt.title('Missing values')
plt.show()

10th 
df.duplicated().sum()

11th
df['status'].value_counts().reset_index()

12th
plt.figure(figsize=(10,6))
sns.countplot(df,x='status')
plt.title('Frequency of Status column')
plt.show()

13th
numarical_col = df.select_dtypes(include='number')
plt.figure(figsize=(20,10))
sns.heatmap(numarical_col.corr(),annot=True,cbar=True,cmap='coolwarm')
plt.title('Correlation Plot')
plt.show()

14th 
X = df.drop(['status','name'],axis=1)
Y = df['status']

15th
X.shape
16th
Y.shape

17th
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

18th
scalar = StandardScaler()

19th
scalar.fit(X_train)
X_train = scalar.transform(X_train)
X_test = scalar.transform(X_test)

20th
X_train

21st
models = {
    "lg": LogisticRegression(),
    "knc": KNeighborsClassifier(),
    "svc": SVC(),
    "gnb": GaussianNB(),
    'dtc':DecisionTreeClassifier(),
    'rfc':RandomForestClassifier(),
}

for name, model in models.items():
    model.fit(X_train,y_train)
    y_predict = model.predict(X_test)
    
    
    print(f"{name} with accuracy :",accuracy_score(y_test,y_predict))

22nd
svc = SVC()
svc.fit(X_train,y_train)
y_predict = svc.predict(X_test)
accuracy_score(y_test,y_predict)

23rd
input_data = ( 1.03983688,  0.17237666,  1.67879945, -0.83410268, -0.94428847,
       -0.73207722, -0.75558996, -0.73211087, -0.93702927, -0.90522785,
       -0.94302224, -0.83727105, -0.87945488, -0.94333241, -0.59315683,
        1.97537236, -0.29114466,  0.35627085, -1.24057161, -0.59088115,
       -2.2231008 , -1.20119397)

np_data = np.asanyarray(input_data)
prediction = svc.predict(np_data.reshape(1,-1))

if prediction == 1:
    print("this person has parkinson disease")
else:
    print("this person has no parkinson disease")

24th
# pickle.dump(svc,open(''))
